name: build-push-image
on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-app-image:
    name: Build and publish deep-nlp core image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        python-version:
          - 3.10.6
        database-name:
          - deepl_core
        database-user:
          - postgres
        database-password:
          - postgres
        database-hostname:
          - localhost
        database-port:
          - 5432
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: ${{ matrix.database-name }}
          POSTGRES_USER: ${{ matrix.database-user }}
          POSTGRES_PASSWORD: ${{ matrix.database-password }}
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_NAME: ${{ matrix.database-name }}
      DATABASE_USER: ${{ matrix.database-user }}
      DATABASE_PASSWORD: ${{ matrix.database-password }}
      DATABASE_HOSTNAME: ${{ matrix.database-hostname }}
      DATABASE_PORT: ${{ matrix.database-port }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.3.1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Test
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade poetry
          poetry install
          poetry run python manage.py migrate
          poetry run pytest --cov .
          poetry run coverage xml
      steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag and Push Image to AWS ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_BACKEND }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
