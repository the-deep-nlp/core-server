version: '3.2'

x-server: &base-server-config
  image: ghcr.io/the-deep-nlp/core-server:main
  environment: &base-environment
    POSTGRES_USER: ${POSTGRES_USER:-postgres}
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    POSTGRES_DB: ${POSTGRES_DB:-deep-nlp}
    POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME:-db}
    POSTGRES_PORT: ${POSTGRES_PORT:-5432}
    REDIS_HOST: ${REDIS_HOST:-redis}
    # Django
    DEBUG: ${DEBUG:-false}
    IS_MOCKSERVER: ${IS_MOCKSERVER:-}
    DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-django-insecure-k^b3&gm&d7j)+ggtdo7d8y^vh709bd=f$dmv_m06$7*7y-kl_z}
    ALLOWED_HOSTS: ${ALLOWED_HOSTS:?Set allowed hosts}
    CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:?Set trusted origins}
    ENDPOINT_NAME: ${ENDPOINT_NAME:?Set endpoint name}
    USE_S3: ${USE_S3:-}
    USE_NEW_SUMMARIZATION: ${USE_NEW_SUMMARIZATION:-True}
    ECS_REQUESTS_BATCH_SIZE: ${ECS_REQUESTS_BATCH_SIZE:-20}
    MAX_NLP_PROCESSING_ATTEMPTS: ${MAX_NLP_PROCESSING_ATTEMPTS:-3}

    # Celery
    CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379}
    CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://redis:6379}

    # Cron
    CRON_DEEP_FETCH_MINUTE: ${CRON_DEEP_FETCH_MINUTE:-0}
    CRON_DEEP_FETCH_HOUR: ${CRON_DEEP_FETCH_HOUR:-*}
    CRON_CREATE_INDICES_MINUTE: ${ON_CREATE_INDICES_MINUTE:-0}
    CRON_CREATE_INDICES_HOUR: ${ON_CREATE_INDICES_HOUR:-*}
    CRON_RESEND_ECS_REQUEST_MINUTES: ${CRON_RESEND_ECS_REQUEST_MINUTES:-15}

    # DEEP
    DEEP_DB_PASSWORD: ${DEEP_DB_PASSWORD:?DEEP password not set}
    DEEP_DB_NAME: ${DEEP_DB_NAME:?DEEP db name not set}
    DEEP_DB_USER: ${DEEP_DB_USER:?DEEP db user not set}
    DEEP_DB_PORT: ${DEEP_DB_PORT:-5432}
    DEEP_DB_HOST: ${DEEP_DB_HOST:-host.docker.internal}

    #MOCKSERVER
    MOCKSERVER_PORT: ${MOCKSERVER_PORT:-8081}

    # ECS endpoints
    SUMMARIZATION_V2_ECS_ENDPOINT: ${SUMMARIZATION_V2_ECS_ENDPOINT:?Provide summarization v2 endpoint}
    TEXTEXTRACTION_ECS_ENDPOINT: ${TEXTEXTRACTION_ECS_ENDPOINT:?Provide text extraction endpoint}
    ENTRYEXTRACTION_ECS_ENDPOINT: ${ENTRYEXTRACTION_ECS_ENDPOINT:?Provide entry extraction endpoint}

    # MODEL_INFO
    CLASSIFICATION_MODEL_ID: ${CLASSIFICATION_MODEL_ID:-classification-model}
    CLASSIFICATION_MODEL_VERSION: ${CLASSIFICATION_MODEL_VERSION:-1.0.0}
    GEOLOCATION_MODEL_ID: ${GEOLOCATION_MODEL_ID:-geolocation-model}
    GEOLOCATION_MODEL_VERSION: ${GEOLOCATION_MODEL_VERSION:-1.0.0}
    RELIABILITY_MODEL_ID: ${RELIABILITY_MODEL_ID:-reliability-model}
    RELIABILITY_MODEL_VERSION: ${RELIABILITY_MODEL_VERSION:-1.0.0}

  tty: true
  depends_on:
    - redis

services:
  redis:
    image: redis:7-alpine

  server:
    <<: *base-server-config
    command: bash -c '/code/scripts/run_prod.sh server'
    volumes:
      - "./mock_responses:/tmp/mock_responses"

  celery:
    <<: *base-server-config
    command: bash -c '/code/scripts/run_prod.sh celery'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "./mock_responses:/tmp/mock_responses"

  celery_beat:
    <<: *base-server-config
    command: bash -c '/code/scripts/run_prod.sh beat'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "./mock_responses:/tmp/mock_responses"
